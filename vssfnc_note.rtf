{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\ul\f0\fs22\lang9 vssfnc_formpopulate:\par
.dataset\ulnone\par
VssFormHTMLID = "VssForm" - HTML .id for document.getElementById\par
VssFormDSDataObj = "VssFormDSDataObj" - ID of data object type\par
VssFormDSDataObjX = "VssFormDSDataObjX" - ID of data object instance\par
VssFormColDSKey = "VssFormColDSKey" - storage for property / key for each label/input\par
(each label/input is a pair of key/value)\par
\par
\ul\par
objparam.htmlform\ulnone\par
- objparam.htmlform could be pre-created before vssfnc_formpopulate call (in this case all element within objparam.htmlform is removed before proceeding)\par
- if objparam.htmlform is not preloaded, create new form into objparam.htmlform\par
- no return will be made if objparam.htmlform is preloaded, else return newly created objparam.htmlform\par
- form has its id set for future query selection according to objparam.htmlformid (if null default to VssFormHTMLID\par
- dataset[VssFormDSdataObj] to store ID of data object type\par
- dataset[VssFormDSDataObjX] to store ID of data object instance reflected by the form\par
\par
\ul objparam.htmlformid\ulnone\par
- use to set .id of form element\par
- for identifying by document.getElementById\par
- as against objparam.arrydataid (used for storing data object data)\par
\par
\ul objparam.arrydataid\ulnone\par
- used to store \par
arrydataid: \{\par
        DataObj: 0,\par
        DataObjX: 1\par
    \},\par
\par
\ul objparam.jsondata\ulnone\par
- objparam.jsondata should never be null. \par
- for form being an entry form for new object, objparam.jsondata would be a object shell with all the properties and with all empty values.\par
\par
\par
\ul objparam.arrydatacol (Input Element)\par
\ulnone - for each property in objparam.jsondata (key:value pairs)\par
- Select vs Input\par
- Input\par
\tab - currently,\par
\tab\tab - radio button / checkbox / text / date / number\par
\par
- each element has a \par
\tab - .dataset[VssFormColsDSKey] as the key, and \par
\tab - .value as the value\par
\tab - attribute: name for form action url purposes\par
\tab - attribute: type for input type\par
\tab - .required\par
\tab - readonly (only if in addition mode)\par
\tab - a set of attributes according to \par
\tab\tab - objparam.arrydatacol[datacolIndex][param_item.arrydatacol.Attr]\par
\tab\tab - an array of [attrubute, value]\par
\tab\tab - for 'pattern', will test for regex onchange of input\par
\tab\tab - additional processing for 'date'\par
- select\par
\tab - if objparam.arryitemdata is populated with the required options\par
\par
// arrydatacol - a 2-dim array of  [key[field name, description strings, required, type, attr, readonly, hidden]]\par
    //      (attr -> an 2-dim array of 2 elem array (ie can set multiple attributes): \par
    //                  1. for type (eg pattern / step) \par
    //                  2. for value (eg [0-9] / 0.01)\par
    //                  (eg: [['pattern','[0-9]'],['step','0.01]])\par
    //      (readonly -> because of option of select element, readonly explicitly set instead of being included in attr)\par
    //      (hidden -> because hidden attribute affects both label and input elements, it's explicitly set instead of being included in attr)\par
\par
\par
\ul objparam.arryinput\ulnone\par
- format display of label and input\par
arryinput: \{\par
\tab Label: \{\tab\par
\tab\tab ArryID: 0,\par
\tab\tab WidthRatio: 0,\par
\tab\tab Desc: 1,\par
\tab\tab Align: 2\par
        \},\tab\par
\tab Input: \{\par
\tab\tab ArryID: 1,\par
\tab\tab WidthRatio: 0,\par
\tab\tab Align: 1\par
        \},\par
\tab fncOnChange\par
    \}\par
\par
* fncOnChange - call back when input change value\par
\par
\ul objparam.arrybutton\ulnone\par
- dataset[VssFormDSDataObj] - ID of data object type\par
- dataset[VssFormDSDataObjX] - ID of data object instance\par
\par
- attribute 'type' set to button if objparam.arrybutton[rowIndex][param_item.arrybutton.Type is null\par
- event on button\par
\tab - formaction set by objparam.button[...ActionURL] \par
\tab - if formaction != submit and != reset --> onclick = objparam.arrybutton[...OnClick]\par
\par
\par
\ul objparam.fnconsubmit\par
\ulnone - call back on form submit (for validation) before submitting the form to the URL.\par
\par
\par
\par
\par
\par
\par
\ul vssfnc_tablepopulate\par
\ulnone !! Value of data cell is retrieved from td.dataset[VssTableColDSVal] - not from .innerHTML !!\par
(for cell with input? becauase cell with input has an input element within the td)\ul\par
\par
Edit table data\par
\ulnone * there are 2 ways to edit table data\par
- using edit row (at the top, below the header row) where datarow is selected for add/edit/delete action via objparam.arryeditrow (child of thead, not tbody)\par
- using input elem for specified datacol via objparam.headercol[index][param_item.arryheadercol.Input]\par
\ul\par
.dataset\ulnone\par
table.dataset\par
\tab objparam.arrydataid:\par
\tab - DataObj (VssTableDSDataObj) (ID of DataObj type)\par
\tab - DataObjX (VssTableDSDataObjX) (ID of DataObj instance) \par
\tab - XrefDataObjX (VssTableDSXrefDataObjX) (ID of Xref DataObj) (eg, in the case of order item, XrefDataObjX would store the ID of its order)\par
datarow\par
\tab - datarow.dataset\par
\tab\tab vssfnc_tablepopulate:\par
\tab\tab - VssTableDatarowDSID (to store ppt:ID of the datarow's item)\par
\tab\tab - VssTableDatarowXDSIndex (to store the row index of the selected row (for editrow operation))\par
\tab - td.dataset\par
\tab\tab vssfnc_tablepopulate:\par
\tab\tab - VssTableColDSKey (to store property name of data object)\par
\tab\tab - VssTableColDSVal (to store the value (either ID of another data object or text) - for ID'ed data innerHTML is showing name instead of the ID)\par
\par
\ul\par
objparam.htmltable\ulnone\par
- if objparam.htmltable is pre-loaded with a table element, no return will be made; else, return newly created objparam.htmltable\par
\par
\ul objparam.htmltableid\par
\ulnone - to be used with window.getElementByID for referencing\par
- id of table will be set to value of objparam.htmltableid\par
- if objparam.htmltableid is not set, will be set to VssTableID\par
(be aware of situation where same document has two tables created via vssfnc_tablepopulate)\par
\ul\par
objparam.arryheadercol (table column header)\ulnone\par
- if objparam.arryheadercol not set, extract the headercol/properties from arryjsondata \par
a 2-dim array of:\par
\tab - [header col[0: description strings, 1: col-width, 2: text-alignment, 3: [input type, input data, onchange function], 4: [button text, click function, css class]]]\par
\tab - col-width - set to '0' to hide column - col-width is checked in both <th> and <td> to determine whether to <display:none>)\par
\tab - text-alignment - 0:center, -1:left, 1:right (default - left)\par
\tab - input type \par
\tab\tab - 1: input element, 2: select element \par
\tab\tab - used for editing individual cell in a datarow\par
\par
- if editrow is enabled, an extra first column will be added to the table\par
\par
\ul objparam.arryeditrow : Edit Row\par
\ulnone - edit row is a child node of table header (not table body)\par
- edit row's id is set to default value VssTableEditRowID\par
- edit row's action column's id is set to default value VssTableEditRowBtn \par
- edit row's dataset[VssTableRowXIndex] will be set to the rowIndex of the selected row when select button of selected datarow clicked\par
- each cell is either:\par
\tab - input (text)\par
\tab - select \par
\tab\tab - options value set according to objparam.arryeditrow[param_item.arryeditrow.ArryItemData]\par
\tab\tab - .value = option ID\par
\tab\tab - .text = option Name\par
- during add/edit to add/edit row to table\par
\tab - if input, update only innerHTML\par
\tab - if select, update innerHTML to name of dataobject, and .dataset[VssTableColDSIDVal] to ID of dataobject (using objparam.arryitemdata)\par
\par
// arryeditrow - an array of:\par
    //          (if arryeditrow is set table.Dataset.DataObj will be set to indicate the data object that the data cells refer to) //\par
    //          0. DataObj (NOT USING)\par
    //          1. a 2-dim array with an array of data item options in its corresponding index (eg. [[], null, null,[], null, null])\par
    //              (options with ID + Name)\par
    //          2. datatype (html string for input type (eg, text, number))\par
    //              - an array of datatype with index corresponding to header datacol\par
    //          3. datatype attributes\par
    //              - an array of 2-elem array attributes type and value (eg, [['step','0.01'],['pattern','[0-9]']) with index\par
    //                  corresponding to header datacol\par
//          4. CSS Style\par
    //              - an array of 2-dim array of 2-elem: 1. CSS Style; 2. CSS Value (eg [['textAlign', 'center'], ['color', 'black']]) with index\par
    //                  corresponding to header datacol\par
        //          5. call back function for each input\par
    //              - an array of call back function for onchange corresponding to each input\par
    //          6. call back function (with array of datacell values as parameter) when done is clicked\par
\par
\par
- edit row is populated (vssfnc_tablepopdrselected) when a datarow is clicked under 2 circumstances:\tab\par
\tab 1. when select td of a datarow is clicked\par
\tab 2. if no callback is set for datarow clicked, when any td of a datarow is clicked\par
\par
\par
\ul Data Row\ulnone\par
- objparam.arryfooteragg to determine whether an aggreation at the footer is done.\par
- tr.dataset[VssTableDatarowID] = Object.values(item)[0] (presumably ID);\par
- td is either for display or input \par
- input (according to arryheadercol)\par
\tab - type: input (1) or select(2) :\par
\tab vssfnc_tablepopparam_item:\par
\tab\tab tdinputtype:\{\par
\tab\tab         Input:1,\par
\tab\tab         Select:2\par
    \tab\tab\}\par
\tab - inputelem.dataset[VssTableDatarowID] = Object.values(item)[0] (presumable ID);\par
- display\par
\tab - plain text or ID of data object (refer objparam.arryitemdata)\par
\tab - plain text -> set innerHTML only\par
\tab - ID of data object \par
\tab\tab -> .dataset[VssTableColDSIDVal] = ID of item\par
\tab\tab -> .innerHTL = Name of item\par
\par
- each cell is a key:value pair\par
\tab - input \par
\tab\tab - key: dataset[VssTableColDSKey] \par
\tab\tab - value: .innerHTML (plain text) or .dataset[VssTableColDSIDVal] (ID of dataobject)\par
\tab - display \par
\tab\tab - key: dataset[VssTableColDSKey]\par
\tab\tab - value: \par
\tab\tab\tab - plain text\par
\tab\tab\tab\tab  .innerHTML (plain text)\par
\tab\tab\tab - ID'ed data object\par
\tab\tab\tab\tab  .dataset[VssTableColDSIDVal] (ID of dataobject)\par
\tab\tab\tab\tab  .innerHTML (name of dataobject - according to arryitemdata)\par
\par
- cell button\par
\tab - objparam.arrybutton to determine if button to appear within cells\par
\tab\tab - button.dataset[VssTableDatarowDSID] = Object.values(item)[0] (presumable ID);\par
\tab\tab - click event : arrycolbtn[...OnClick]\par
                            \par
\ul objparam.arrybuttontable\ulnone\par
// arrybuttontable - a 2-dim array of \par
    //          [[0: button text, 1: button_clicked function, 2: css class of button\par
]]\par
\par
\par
\ul objparam.fncdatarowclicked\ulnone\par
- for each datarow\par
- pass back the .dataset[VssTableDatarowDSID] (which stores the ppt:ID of the clicked datarow's item) of each datarow as a parameter in the call back function\par
- edit row (if any) has differemt event handler than datarow\par
\par
- for cell acting as an input element, onchange event trigger with headercol[...arryheadercol.Input][...arryheadercol.Input.OnChange]\par
\par
\ul eg of tablepopulate_param:\ulnone\par
arryheadercol = [\par
    [, '0',,], \par
    [, '0',], \par
    [, '0',], \par
    ['Product ID'], \par
    ['Product Name',,,,["zz",function()\{alert(`cell clicked: $\{this.parentElement.firstChild.textContent\}`)\},null]], \par
    ['Quantity'], \par
    ['Unit Price'], \par
    ['Amount'],\par
    [,'0' ,]];\par
\par
\ul vssfnc_menupopulation\ulnone\par
- visibility control\par
\tab - when mousout on menu of level 1, reintialise whole menu\par
\tab - no toggling of visibility of menu item within menu of level 1\par
\tab - expand or collapse submenu be clicking (no auto hide/show with mouseon or mouseleave)\par
\par
}
 